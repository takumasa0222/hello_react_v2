name: Deploy Backend Stack

on:
    workflow_dispatch:
      inputs:
        stage:
          description: 'Environment stage'
          required: true
          default: 'prod'
        appname:
          description: 'Application name'
          required: true
          default: 'greetings'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Assume Role with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
         role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ github.event.inputs.appname }}-${{ vars.CDK_ROLE_NAME }}-${{ github.event.inputs.stage }}
         role-session-name: GitHubActions
         aws-region: ${{ vars.AWS_REGION }}

      - name: Build backend
        run: cd ${{ vars.BACKEND_DIR }} && npm ci && npm run build && npm run zip

      - name: Upload and get S3 versionId
        id: upload
        run: |
          OUTPUT=$(aws s3api put-object \
            --bucket "${{ github.event.inputs.appname }}-lambda-code-repo-${{ github.event.inputs.stage }}" \
            --key "${{ github.event.inputs.appname }}/${{ github.event.inputs.stage }}/lambda-backend.zip" \
            --body "${{ vars.BACKEND_DIR }}/lambda-backend.zip" \
            --output json)
          VERSION_ID=$(echo "$OUTPUT" | jq -r '.VersionId')
          echo "version_id=$VERSION_ID" >> $GITHUB_OUTPUT


      - name: Check if Export exists
        id: export_check
        run: |
          EXPORT_NAME="greetings-ApigatewayId-prod"
          EXPORT_EXISTS=$(aws cloudformation list-exports \
            --query "Exports[?Name=='$EXPORT_NAME'] | length(@)" \
            --output text)
            if [ "$EXPORT_EXISTS" -eq 1 ]; then
              echo "apigwExportExist=true" >> $GITHUB_OUTPUT
            else
              echo "apigwExportExist=false" >> $GITHUB_OUTPUT
            fi

      - name: CDK Deploy Backend
        working-directory: ./${{ vars.CDK_DIR }}
        run: |
          npm ci && npx cdk deploy --app "npx ts-node --prefer-ts-exts bin/backend.ts" \
          --require-approval never \
          --context stage=${{ github.event.inputs.stage }} \
          --context appname=${{ github.event.inputs.appname }} \
          --context codeVersionId=${{ steps.upload.outputs.version_id }} \
          --context apigwExportExist=steps.export_check.outputs.apigwExportExist
