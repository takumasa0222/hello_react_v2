name: Entire flow Deployment (CDK + React)

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Environment stage'
        required: true
        default: 'prod'
      appname:
        description: 'Application name'
        required: true
        default: 'greetings'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: |
        cd ${{ vars.CDK_DIR }} && npm ci
        cd ../${{ vars.FRONTEND_DIR }} && npm ci
        cd ../${{ vars.BACKEND_DIR }} && npm ci

    - name: Build backend
      run: cd ${{ vars.BACKEND_DIR }} && npm run build && npm run zip

    - name: Assume Role with OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
       role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ github.event.inputs.appname }}-${{ vars.CDK_ROLE_NAME }}-${{ github.event.inputs.stage }}
       role-session-name: GitHubActions
       aws-region: ${{ vars.AWS_REGION }}

    - name: Deploy backend repository
      run: |
        cd ${{ vars.CDK_DIR }}
        npx cdk deploy --app "npx ts-node bin/code-storage.ts" \
        --require-approval never \
        --context stage=${{ github.event.inputs.stage }} \
        --context appname=${{ github.event.inputs.appname }} \
        --outputs-file ../cdk-outputs.json

    - name: (for Dev) Upload to S3 
      if: ${{ github.event.inputs.stage == 'dev' }}
      run: |
        aws s3 cp ${{ vars.BACKEND_DIR }}/lambda-backend.zip s3://${{ github.event.inputs.appname }}-lambda-code-repo-dev/${{ github.event.inputs.appname }}/dev/lambda-backend.zip

    - name: (For Dev) Update Lambda Code
      if: ${{ github.event.inputs.stage == 'dev' }}
      run: |
        aws lambda update-function-code \
        --function-name greetings-GreetingFunction-dev \
        --s3-bucket ${{ github.event.inputs.appname }}-lambda-code-repo-dev \
        --s3-key ${{ github.event.inputs.appname }}/dev/lambda-backend.zip \
        --publish


    - name: Upload and get S3 versionId
      if: ${{ github.event.inputs.stage != 'dev' }}
      id: upload
      run: |
        OUTPUT=$(aws s3api put-object \
          --bucket ${{ github.event.inputs.appname }}-lambda-code-repo-${{ github.event.inputs.stage }} \
          --key "${{ github.event.inputs.appname }}/${{ github.event.inputs.stage }}/lambda-backend.zip" \
          --body "${{ vars.BACKEND_DIR }}/lambda-backend.zip" \
          --output json)
        VERSION_ID=$(echo "$OUTPUT" | jq -r '.VersionId')
        echo "version_id=$VERSION_ID" >> $GITHUB_OUTPUT


    - name: Deploy infrastructure via CDK
      run: |
        cd ${{ vars.CDK_DIR }}
        npx cdk deploy --all \
        --require-approval never \
        --context stage=${{ github.event.inputs.stage }} \
        --context appname=${{ github.event.inputs.appname }} \
        --context codeVersionId=${{ steps.upload.outputs.version_id || 'unknown'}} 

    - name: frontend build
      working-directory: ${{ vars.FRONTEND_DIR }}
      run: npm run build


    - name: Upload React build to S3
      run: |
        aws s3 sync ${{ vars.FRONTEND_DIR }}/build s3://${{ github.event.inputs.appname }}-frontend-${{ github.event.inputs.stage }} --delete --region $AWS_REGION

    - name: Finish
      run: echo "Deployment complete for app name ${{ github.event.inputs.appname }} stage ${{ github.event.inputs.stage }}"
